CREATE TABLE SALES
(
	  ORDER_NUMBER  VARCHAR  PRIMARY KEY
	, DATE          DATE   
	, WARE_HOUSE    VARCHAR
	, CLIENT_TYPE   VARCHAR
	, PRODUCT_LINE  VARCHAR
	, QUANTITY      INT
	, UNIT_PRICE    FLOAT
	, TOTAL         FLOAT
	, PAYMENT       VARCHAR
	, PAYMENT_FEE   FLOAT
	
);

COPY SALES(ORDER_NUMBER, DATE, WARE_HOUSE, CLIENT_TYPE,
	PRODUCT_LINE, QUANTITY, UNIT_PRICE, TOTAL, PAYMENT, PAYMENT_FEE)
FROM 'C:\\Program Files\\PostgreSQL\\16\\data\\sales.csv'
DELIMITER ','
CSV HEADER;

SELECT * FROM SALES;

--  Total sales by Warehouse, client type and product_line

SELECT SUM(TOTAL) AS TOTAL_SALES, WARE_HOUSE, CLIENT_TYPE, PRODUCT_LINE FROM SALES
GROUP BY WARE_HOUSE, CLIENT_TYPE, PRODUCT_LINE
ORDER BY WARE_HOUSE;

-- Total sales by month

SELECT DATE_TRUNC('month', DATE) AS SALE_MONTH,
    SUM(TOTAL) AS TOTAL_REVENUE
FROM SALES
GROUP BY SALE_MONTH
ORDER BY SALE_MONTH;

-- Monthly sales by warehouse

SELECT DATE_TRUNC('month', DATE) AS SALE_MONTH,
    WARE_HOUSE, SUM(TOTAL) AS MON_SALE_WAR
FROM SALES
GROUP BY SALE_MONTH, WARE_HOUSE
ORDER BY SALE_MONTH, WARE_HOUSE;

-- Product line sales by warehouse

SELECT PRODUCT_LINE, WARE_HOUSE, SUM(TOTAL) AS SAL_PROD_WAR
FROM SALES
GROUP BY PRODUCT_LINE, WARE_HOUSE
ORDER BY PRODUCT_LINE, WARE_HOUSE;

-- Rank all sales within each month and identify the maximum sale for each month.

SELECT *, DATE_TRUNC('Month', DATE) AS SALE_MONTH,
	MAX(TOTAL) OVER (PARTITION BY DATE_TRUNC('Month', DATE)) AS MAX_EACH_MONTH,
	RANK() OVER (PARTITION BY DATE_TRUNC('Month', DATE) ORDER BY TOTAL DESC) AS RANK
	FROM SALES

-- Maximum sale of each month and its details
	
WITH MONTHLY_SALES AS (
	SELECT *, DATE_TRUNC('Month', DATE) AS SALE_MONTH,
	MAX(TOTAL) OVER (PARTITION BY DATE_TRUNC('Month', DATE)) AS MAX_EACH_MONTH,
	RANK() OVER (PARTITION BY DATE_TRUNC('Month', DATE) ORDER BY TOTAL DESC) AS RANK
	FROM SALES)
	
SELECT ORDER_NUMBER, DATE, WARE_HOUSE, CLIENT_TYPE,
	PRODUCT_LINE, QUANTITY, UNIT_PRICE, TOTAL, PAYMENT, 
	PAYMENT_FEE, SALE_MONTH, MAX_EACH_MONTH
FROM MONTHLY_SALES
WHERE RANK = 1
ORDER BY SALE_MONTH;

/*Maximum quantity sold for each warehouse and client type and also included
the date of that sale*/

WITH MaxSales AS (
    SELECT 
        WARE_HOUSE,
        CLIENT_TYPE,
        MAX(QUANTITY) AS MAX_SALES_QUA
    FROM 
        SALES
    GROUP BY 
        WARE_HOUSE, CLIENT_TYPE
)
SELECT 
    S.DATE,
    M.MAX_SALES_QUA,
    S.WARE_HOUSE,
    S.CLIENT_TYPE
FROM 
    SALES S
JOIN 
    MaxSales M 
ON 
    S.WARE_HOUSE = M.WARE_HOUSE 
    AND S.CLIENT_TYPE = M.CLIENT_TYPE 
    AND S.QUANTITY = M.MAX_SALES_QUA
ORDER BY 
    M.MAX_SALES_QUA DESC;

-- Month over Month revenue growth for each warehouse

WITH MONTHLY_REVENUE AS (
	SELECT DATE_TRUNC('Month', Date) AS SALE_MONTH,
	        WARE_HOUSE, SUM(TOTAL) AS TOTAL_REVENUE
	FROM SALES
	GROUP BY SALE_MONTH, WARE_HOUSE
)

SELECT WARE_HOUSE, SALE_MONTH, TOTAL_REVENUE,
    LAG(TOTAL_REVENUE) OVER(PARTITION BY WARE_HOUSE ORDER BY SALE_MONTH) AS PREV_MON_REV,
    (TOTAL_REVENUE - LAG(TOTAL_REVENUE) OVER(PARTITION BY WARE_HOUSE ORDER BY SALE_MONTH))/
	NULLIF(LAG(TOTAL_REVENUE) OVER(PARTITION BY WARE_HOUSE ORDER BY SALE_MONTH), 0)*100 AS REVENUE_GROWTH
FROM MONTHLY_REVENUE
ORDER BY SALE_MONTH, WARE_HOUSE;

-- Best selling product line per ware house

WITH RANKED_SALES AS (
    SELECT 
        WARE_HOUSE,
        PRODUCT_LINE,
        SUM(TOTAL) AS BEST_SELL_PRICE,
        RANK() OVER (PARTITION BY WARE_HOUSE ORDER BY SUM(TOTAL) DESC) AS RANK
    FROM 
        SALES
    GROUP BY 
        WARE_HOUSE, PRODUCT_LINE
)
SELECT 
    WARE_HOUSE,
    PRODUCT_LINE,
    BEST_SELL_PRICE,
    rank
FROM 
    RANKED_SALES
WHERE 
    RANK = 1;

-- Top 5 orders with highest revenue

SELECT ORDER_NUMBER, WARE_HOUSE, PRODUCT_LINE, TOTAL 
FROM SALES
ORDER BY TOTAL DESC
LIMIT 5;

-- Cummulative revenue by month

SELECT SALE_MONTH,
	  SUM(TOTAL_REVENUE) OVER(ORDER BY SALE_MONTH) AS CUMMULATIVE_REVENUE
FROM(
SELECT DATE_TRUNC('Month', Date) AS SALE_MONTH,
       SUM(TOTAL) AS TOTAL_REVENUE
FROM SALES
GROUP BY SALE_MONTH
ORDER BY SALE_MONTH)
AS MONTHLY_SALES;

-- Percentage change in sales for each product line month-over-month

WITH PRODUCTLINESALES AS (
	SELECT DATE_TRUNC('Month', Date) AS SALE_MONTH,
	       PRODUCT_LINE, SUM(TOTAL) AS MON_TOTAL
	FROM SALES
	GROUP BY PRODUCT_LINE, SALE_MONTH
)

SELECT PRODUCT_LINE, SALE_MONTH, MON_TOTAL,
       LAG(MON_TOTAL) OVER(PARTITION BY PRODUCT_LINE ORDER BY SALE_MONTH) AS PREV_MON_TOTAL,
       (MON_TOTAL - LAG(MON_TOTAL) OVER(PARTITION BY PRODUCT_LINE ORDER BY SALE_MONTH))/
       NULLIF(LAG(MON_TOTAL) OVER(PARTITION BY PRODUCT_LINE ORDER BY SALE_MONTH),0)*100 AS PER_CHANGE
FROM PRODUCTLINESALES 
ORDER BY PRODUCT_LINE, SALE_MONTH;